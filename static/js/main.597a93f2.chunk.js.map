{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","word","react_default","a","createElement","style","height","alert","className","concat","type","role","charAt","toUpperCase","slice","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","console","log","newText","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","filter","element","prototypes","PropTypes","string","isRequired","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.597a93f2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word)=> {\r\n        return word.charAt(0).toUpperCase() + word.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n                        </li>\r\n\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\" role=\"search\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.prototypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Insert title here\",\r\n    aboutText: \"About text here\"\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        console.log(\"Uppercase was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        console.log(\"Lowercase was clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Copied to Clipboard\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\"; // wrong way to change the state\r\n    // setText(\"new text\"); // correct way to change the state\r\n    return (\r\n        <>\r\n            <div className='container' style={{color: props.mode === 'light'?'#172445':'white'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'light'?'white':'#344f70',\r\n                color:props.mode === 'light'?'#172445':'white'}} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick}>Convert to uppercase</button>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleLowClick}>Convert to lowercase</button>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleClearClick}>Clear Text</button>\r\n                <button disabled = {text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleCopyClick}>Copy Text</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode === 'light'?'#172445':'white'}}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(\" \").filter((element)=>{return element.length !== 0}).length} words and {text.length} characters.</p>\r\n                <h3>Preview</h3>\r\n                <p>{text.length > 0? text:\"Nothing to preview here...\"}</p>\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\n\nfunction App() {\n  const [mode, setMode] = useState('light') // To enable light and dark mode\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=> {\n      setAlert({\n        msg: message,\n        type: type\n      })\n\n      setTimeout(() => {\n        setAlert(null);\n      }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#172445';\n      showAlert(\"Dark Mode enabled.\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode enabled.\", \"success\");\n    }\n    \n  }\n  return (\n    <>\n      <Navbar title=\"Text Modifier\" aboutText = \"About\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\" >\n      <TextForm showAlert={showAlert} heading = \"Enter the text here to modify..\" mode={mode}/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}